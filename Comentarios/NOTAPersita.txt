site
https://github.com/react-native-async-storage/async-storage
React Native.dev -> Get Started -> environment Setup
->Setting up the development environment

-->  React Native CLI Quickstart ->Windows->Android

-->Instalar Chocolaty -> Get Startes ---AGORA USA O POWSHEL (administrador)
# Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = 
[System.Net.ServicePointManager]::
SecurityProtocol -bor 3072; iex 
((New-Object System.Net.WebClient).
DownloadString('https://community.chocolatey.org/install.ps1'))

# choco install -y nodejs.install openjdk8

-->Instalat Android Studio

--> Configurar variaveis de ambientes

ANDROID_HOME -> C:\Users\barbosa\AppData\Local\Android\Sdk

path ->usuario ---C:\Users\barbosa\AppData\Local\Android\Sdk\platform-tools

1- INICIO APP
---> ABRE PRONT DE COMANDO - No diretório desejado

# npx react-native init PrimeiroProject

2 - USAR EDITOR DE CODIGO _ Visual studio\sublime
--Abre o folder do app (pasta)

3 - Para RODAR

# npx react-native run-android

4---Bibliotecas USADAS

5---APAGAR App.js e VAMOS APRENDER
---Forma 1 - de criar função
import React, {component} from "react";
import {View, Text, TextInput, StyleSheet, TimePickerAndroid, TouchableOpacity} from 'react-native';

export  default  function App1(){
return(
  <View>

    <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

      <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

    </View>
);

};

---Forma 2 - de criar Class

import React, {component} from "react";
import {View, Text, TextInput, StyleSheet, TimePickerAndroid, TouchableOpacity} from 'react-native';

/*
const App1 = () => {
  return (
    <View>

    <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

      <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

    </View>
  );
}

export default App1;
*/


---Forma 3 - de criar Class
/*
ESSA NÂO DEU CERTO

export default class App1 extends component{
render(){
return(
   <View>
    <Text>oi meu DEUS</Text>
    
  </View>
);

}
  
}

*/

5----Ficamos com a PRIMEIRA - compomente de função 
-----NOSSO App.js
import React from "react";
import {View, Text} from 'react-native';

export  default  function App1(){
return(
  <View>

    <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

      <View>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
      <Text>oi meu DEUS</Text>
    </View>

    </View>
);
};

6---VAMOS FZER NOSSO PRIMEIRO COMPONNTES (Cria a PASTA RAIZ Compomentes->comp1.js)

import React from "react";
import {View, Text} from 'react-native';

//Posso omitir o nome da função--comp1

export default function (){

    return (
        <Text>oi meu DEUS</Text>

    );
}

-----JÁ é um componentes (Um campo Text com algo escrito)

7-- Importar (Pegar o componentes no App.js)
//import React, {component} from "react";
import React from "react";
import {View, Text} from 'react-native';
//Importa o componente Não precisa ser o mesmo nome (Usei C1) e usa no return
import C1 from './componentes/comp1' 

export  default  function App1(){
return(
  <View>
   <C1/>
  </View>
); 

8--- Estilização CSS ou js
---Estilizando no proprio codigp do componente
----e DEPOIS APLICAR no proprio componente o estilos.txt1 (Text)
---Temos que criar uma classe const estilos e definir toda a estilização
--Declarar StyleSheet no import react-native

---FICA ASSIM o comp1import React from "react";
import {StyleSheet, View, Text} from 'react-native';

//Posso omitir o nome da função--comp1
export default function (){

    return (
        <Text style={estilos.txt1}>oi meu DEUS</Text>

    );
}

const estilos = StyleSheet.create({

txt1:{
    color:'#f00',
         
    }
});

----SE QUISSEMOS FAZER A ESTILIIZAÇAO DO CI VAMOS TER QUE FAZER 
NA VIEW App.js 
--Não esquecer de Importar o StyleSheet, Usei conteiner na View

//import React, {component} from "react";
import React from "react";
import {StyleSheet, View, Text} from 'react-native';
//Importa o componente Não precisa ser o mesmo nome (Usei C1) e usa no return
import C1 from './componentes/comp1' 

export  default  function App1(){
return(
  <View style={estilos.conteiner} >
    <C1/>
    <C1/>
    <C1/>
    <C1/>
    <Text style={estilos.txt0}>Vai dar tudo Certo</Text>
    </View>
);
};

const estilos = StyleSheet.create({

  conteiner:{
    flex:1,
    backgroundColor:'#444',
    alignItems:'center',
    justifyContent:'center',
    
     },

  txt0:{
      color:'#a00',
      fontSize:20,
       }
  
  
  });
  
9----PARA APLICAR UMA FORMATAÇÂO EM LINE 
FICA ASSIM, COM UMA CHAVE A MAIS -- Vamos criar outro texto e fazer a formatação
 <View style={estilos.conteiner} >
    <C1/>
    <C1/>
    <C1/>
    <C1/>
    <Text style={estilos.txt0}>Vai dar tudo Certo</Text>
    <Text style={{color:'#fff', fontSize:40}}>Com a bença do Senhor</Text>
    </View>

10----  PASSAR VALORES PARA OS COMPONENTES
vamos passar propriedades para C1 (curso) na View App.js e interceptar la no comp1.js

--Passar App.js
    <C1 curso="Cavalo" nota="10" />
    <C1 curso="gato" nota="10" />
    <C1 curso="cachorro" nota="10" />
    <C1 curso="abelhas" nota="10"/>

 ---Pegar comp1.js  (vamos dizer que queremos usar o props (propriedades) na função
 e pegar entre parentes {props.propriedade} 
 OBS: Pode pegar mais de uma propriedade

 export default function (props){

    return (
         <Text style={estilos.txt1}>Nossos aninais: {props.curso} Nota - {props.nota}</Text>


    );
}

11---CSS externo --CRIAR EM RAIZ UMA PASTA estilos->Estilos.js

// COMO é uma pasta de estilos para serem exportados não precisa de 
//React - precisamos somente do StyleSheet do react-native
//import React from "react";
import {StyleSheet} from 'react-native';

//Posso omitir o nome da função--comp1
export default StyleSheet.create({
    conteiner:{
        flex:1,
        backgroundColor:'#fff',
        alignItems:'center',
        justifyContent:'center',
        
         },

         textoCurso:{
             color:'#00f',
             fontSize:15,

            },

            textoPadrao:{
                color:'#fff',
                fontSize:20,
   
               },
    
            textoTitulo:{
                color:'#f00',
                fontSize:20,
   
               },



});

---para ser cghamado (usado) no componentes comp1.js (apaga o estilo que tem la) e Importa
o Estilos.js da pasta (caminho)--
OBS: Os dois pontinho sugnifica que vai para a pasta refencia em diante

import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from '../estilos/Estilos.js';

//Posso omitir o nome da função--comp1
export default function (props){

    return (
        <Text style={Estilos.textoCurso}>Nossos aninais: {props.curso} Nota - {props.nota}</Text>

    );
}

---para ser chamado (usado) no componentes App.js (apaga o estilo ---const estilos = StyleSheet.create({ --- que tem la) e Importa
o Estilos.js da pasta (caminho)-- OBS: o App.js esta no mesmo nivel da pasta estilos estã é apenas um ponto
//import React, {component} from "react";
import React from "react";
import {StyleSheet, View, Text} from 'react-native';
//Importa o componente Não precisa ser o mesmo nome (Usei C1) e usa no return
import C1 from './componentes/comp1' 
import Estilos from './estilos/Estilos.js';
export  default  function App1(){
return(
  <View style={Estilos.conteiner} >
    <C1 curso="Cavalo" nota="10" />
    <C1 curso="gato" nota="10" />
    <C1 curso="cachorro" nota="10" />
    <C1 curso="abelhas" nota="10"/>
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    </View>
);
};



  
12---Elementos Responsivos, contêiners Flex (Caixas)
---Vamos criar um novo componentes->Caixas
--Vamos usar somente  View com style emline (style={{}} ) Dois cochetes
--INICIALMENTE VAMOS USAR UM VIEW COM 100% (ocupa todo espaço e DENTRO DELA OUTRAS TRES VIEW COLORIDAS)

import React from "react";
import { View } from 'react-native';
//Posso omitir o nome da função--comp1
export default function (props){

    return (
      <View style={{width:'100%'}}>
          <View style={{width:50, height:50, backgroundColor:'#0ff'}}></View>
          <View style={{width:50, height:50, backgroundColor:'#f00'}}></View>
          <View style={{width:50, height:50, backgroundColor:'#00f'}}></View>

      </View>
    );
}
----- AGORA VAMOS IMPORTAR PARA App.js (import Caixas from './componentes/Caixas' )
--VAMOS TIRAR TAMBEM O impor C1 e OS C1 de dentro da View (<View style={Estilos.conteiner} >)
---E colocar nosso COMPONENTE Caixas  (beja que não finalizei com a extensão)

import React from "react";
import {StyleSheet, View, Text} from 'react-native';
//Importa os componentes necessarios - Não precisa ser o mesmo nome (Usei C1) e usa no return
//import Caixas from './componentes/comp1' 
import Caixas from './componentes/Caixas' 
import Estilos from './estilos/Estilos.js';
export  default  function App1(){
return(
  <View style={Estilos.conteiner} >
    <Caixas/>
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    </View>
);
};

---OK PERFEITO

---VAmos mexer um Pouco co as propriedade do Nosso componente Caixas

-- <View style={{width:'100%', flexDirection:'row'}}>  ----- FICA NA HORIZONTAL e row na vertical ---temos os 
 reverse dos dois.
----<View style={{width:'100%', flexDirection:'row', justifyContent:'center'}}> --DISTRIBUI AO LONGO DA TELA
---<View style={{width:'100%', height:'100%', flexDirection:'row', alignItems:'center', justifyContent:'center'}}> --POSICIONAMENTO vertical
EIXO SEGUNDARIO

PARA POSICIONAR NO EIXO SEGUDARIO (Y) tem que ter o height  ---se for porcetage, ente aspas simples '' e se em numero
sem nada.
 --Ficou ASSIM
 import React from "react";
import { View } from 'react-native';


//Posso omitir o nome da função--comp1
export default function (props){

    return (
      <View style={{width:'100%', height:300, flexDirection:'row', alignItems:'center', justifyContent:'space-between'}}>
          <View style={{width:50, height:50, backgroundColor:'#0ff'}}></View>
          <View style={{width:50, height:50, backgroundColor:'#f00'}}></View>
          <View style={{width:50, height:50, backgroundColor:'#00f'}}></View>

      </View>
    );
}

13----Renderização Condicional do Componentes.
--FAZ em App.js  uma função (fexibir) que recebe uma paametro (vp1) e decide se ele vai exibir ou não
e depois chama ela na função App1 dentro das View ---{fexibir (true)} INICIALMENTE como verdadeira
import React from "react";
import {StyleSheet, View, Text} from 'react-native';
//Importa os componentes necessarios - Não precisa ser o mesmo nome (Usei C1) e usa no return
//import Caixas from './componentes/comp1' 
import Caixas from './componentes/Caixas' 
import Estilos from './estilos/Estilos.js';


function fexibir(vp1){
  if (vp1){
        return(<Text>Vou aparecer ou não</Text>)

  }else{
    return(<Text>------</Text>)
  }
}


export  default  function App1(){
return(
  <View style={Estilos.conteiner} >
    <Caixas/>
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir (true)} 
    </View>
);
};

---OH PERFEITO - se for false dar certo TAMBEM
--PODE SER CO ARRAY Functio tambem
const fexibir = (vp1) =>{
  if (vp1){
        return(<Text>Vou aparecer ou não</Text>)

  }else{
    return(<Text>------</Text>)
  }
}

-------DAR O MESMO RESULTADO e ainda pode ser por uma variavel tirando as funcção ça de cima
export  default  function App1(){
  let fexibir = true;
return(
  <View style={Estilos.conteiner} >
    <Caixas/>
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir?<Text>Vou aparecer ou não</Text>:<Text>------</Text>}
    </View>
);
};

--------E ainda podemos fazer em codicional em duas etapas com o operador &&
export  default  function App1(){
  let fexibir = false;
return(
  <View style={Estilos.conteiner} >
    <Caixas/>
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir?<Text>Vou aparecer ou não</Text>:<Text>------</Text>}
    {fexibir && <Text>Vou aparecer ou não</Text>}
    </View>

 ----VAMOS DAR UMA PROPRIEDADE(exibir)AO COMPONENTE Caixas  e  importar em COMPONENTE Caixas
---em App.js
export  default  function App1(){
  let fexibir = true;
return(
  <View style={Estilos.conteiner} >
    <Caixas exibir={fexibir} />
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir?<Text>Vou aparecer ou não</Text>:<Text>------</Text>}
    {fexibir && <Text>Vou aparecer ou não</Text>}
    </View>

---Em Caixas.js vamos primeiramnete aumemtar a view e fazer uma nova distribuição---
---Poderia ter sido feito antes  FICA ASSIM:
import React from "react";
import { View } from 'react-native';


//Posso omitir o nome da função--comp1
export default function (props){

    return (
      <View style={{width:'100%', height:300, flexDirection:'column', justifyContent:'space-between'}}>
          <View style={{ flexGrow:1 , backgroundColor:'#0ff'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#f00'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#00f'}}></View>

          <View style={{ flexGrow:1 , backgroundColor:'#0ff'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#f00'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#00f'}}></View>

      </View>
    );
}

--------LISTADO extendido na horizontal  --vamos continuar com a redirencionalização CONDICIONAL
----No COMPOMENTE Caixas
--Colocamos a propriedade props.exibir ? na View e busca um ou outro dependendo do estado (trie ou false)
la na App.js

import React from "react";
import { View } from 'react-native';


//Posso omitir o nome da função--comp1
export default function (props){

    return (
      <View style={{width:'100%', height:300, flexDirection:'column', justifyContent:'space-between'}}>

        {
      props.exibir ?
          <View style={{flex:1,}}>
          <View style={{ flexGrow:1 , backgroundColor:'#0ff'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#f00'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#00f'}}></View>
          </View>
          :
          <View style={{flex:1,}}>
          <View style={{ flexGrow:1 , backgroundColor:'#0ff'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#f00'}}></View>
          <View style={{ flexGrow:1 , backgroundColor:'#000'}}></View>
          </View>
        }

      </View>
    );
}

-----

14--IMAGEM - para nossa imagems vamos criar na RAIZ a pasta assets
e colocar nossa imagens, alé disso tem que import (declarar ) la em cima
import React from "react";
---import {StyleSheet, View, Text, Image} from 'react-native';

export  default  function App1(){
  let fexibir = true;
return(
  <View style={Estilos.conteiner} >
   <Image source={require('./assets/hdc1.png')} />
    <Caixas exibir={fexibir} />
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir?<Text>Vou aparecer ou não</Text>:<Text>------</Text>}
    {fexibir && <Text>Vou aparecer ou não</Text>}
    </View>
    
);
};
----Estilizando 
  <Image source={require('./assets/hdc1.png')}
    style={{ width: 140, height: 140 }}
   />

-------
<Image source={require('./assets/hdc1.png')}
    style={{ width: 250, resizeMode:'contain' }}
   />
------
<Image source={{ uri:'http://hdc1.com'}}
    style={{ width: 250, resizeMode:'contain' }}
   />

15------Arrow Function ---VAMOS em (App.js) para estudar Arrow Function 
---FORMA MAIS SIMPLES DE CODIFICAR UMA FUNÇÃO
--faz a função 
 -----FUNÇÃO DOBRO-----------
function dobro(n){
return n*2
}

--E chama onde quizer dentro de um compomente ou elemento , vou usar uma caixa de texto
 <Text> {dobro (2)}</Text>

 -----FUNÇÃO SOMA-----------
function soma(n1,n2){
return (n1+n2)
}

--Chama 
<Text> {soma (2,4)}</Text>

---PODEMOS FAZER ARRAY function (não damos nome e sim uma SETA) DESTA DUAS função

()=>{}  -----Pegando os paramentros no parentes e passando para o corpo da função

--- Quanto tivemos somente um paramentros não precisamos indicamos no parentes
---- a função DOBRO pode ser escrita assim --Atribuimos o corpo da função a uma constante
const dobro=(n)=>{
return n*2
}
---PODEMOS reduzir ainda mais (pois a função DOBRO só tem um (1) paramentros -- podemos omitir-la e tirar os parentes)
const dobro=n=>n*2
}

-----E A Functio SOMA FICA ASSIM ASSIM 

const soma=(n1,n2)=>n1+n2
  }

  ---O RESULATDO É O MESMO

  16 --BUTTON --
  ---O botão precisa das propriedades 
 <Button
      title="mostrar mensagem"
      //Sua funcionalidade, no caso chamamos uma array fuction de alerta
       onPress={()=>Alert.alert ('MSG','aprendendo a persitir')}
    />

----PODEMOS USAR O BOTÃO PARA CHAMA UMA FUNçÂO CRIADA

----função CRIADA-
function msg(){
   Alert.alert ('MSG','puxando função')
}

---chamada da Função no Button
<Button
      title="Puxar função"
      //Sua funcionalidade, no caso chamamos uma array fuction de alerta
      onPress={msg}
    />

---PODER SER UMA Arrow fuction    

---------NESSE MOMENTO NOSSA View App.js ESTA ASSIM (poluida para Estudo)

import React from "react";
import {StyleSheet, View, Text, Image, Button, Alert} from 'react-native';
//Importa os componentes necessarios - Não precisa ser o mesmo nome (Usei C1) e usa no return
//import Caixas from './componentes/comp1' 
import Caixas from './componentes/Caixas' 
import Estilos from './estilos/Estilos.js';


const dobro=n=>n*2
const soma=(n1,n2)=>n1+n2

/*
function fexibir(vp1){
  if (vp1){
        return(<Text>Vou aparecer ou não</Text>)

  }else{
    return(<Text>------</Text>)
  }
}
*/
/*  PODER SER ARRAYfunction
const fexibir = (vp1) =>{
  if (vp1){
        return(<Text>Vou aparecer ou não</Text>)

  }else{
    return(<Text>------</Text>)
  }
}
*/

function msg(){
   Alert.alert ('MSG','puxando função')
}

export  default  function App1(){
  let fexibir = true;
return(
  <View style={Estilos.conteiner}>
    <Button
      title="mostrar mensagem"
      //Sua funcionalidade, no caso chamamos uma array fuction de alerta
      onPress={()=>Alert.alert ('MSG','aprendendo a persitir')}
    />
    <Button
      title="Puxar função"
      //Sua funcionalidade, no caso chamamos uma array fuction de alerta
      onPress={msg}
    />
   <Image source={require('./assets/hdc8.png')}
    style={{ width: 250, resizeMode:'stretch' }}
   />
   <Text> {dobro (2)}</Text>
   <Text> {soma (2,4)}</Text>
    <Caixas exibir={fexibir} />
    <Text style={Estilos.textoPadrao}>Vai dar tudo Certo</Text>
    <Text style={Estilos.textoTitulo}>Com a bença do Senhor</Text>
    {fexibir?<Text>Vou aparecer ou não</Text>:<Text>------</Text>}
    {fexibir && <Text>Vou aparecer ou não</Text>}
    </View>
    
);
};

OBS: O BUTTON é basicão

---VAMOS FAZER UMA LIMPA NO NOSSO CODIGO
import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';


export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
    <Text >Vai dar tudo Certo</Text>
    <Text >Com a bença do Senhor</Text>
    
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     }
 });


17---FlatList, lista plana
---VAMOS EM COMPONENTES e Criamos um componente chamado ListaPlana.js
import React from "react";
import { View, Text, FlatList} from 'react-native';


export default function (){

return (
    <View>

        
    </View>

)}

----E depois faremos a chamada desse componente em App.js para isso precisamos
primeiramente importalo para o App.js ---(import Lp from './componentes/ListaPlana';)--
e depois chamarlo dentro do codigo <Lp/>

import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
import Lp from './componentes/ListaPlana';

export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
    <Text >Vai dar tudo Certo</Text>
    <Text >Com a bença do Senhor</Text>
    <Lp/>
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     }

   
  });

---AGORA VAMOS PREPARAR UMA COLEÇÃO DE DADOS  (no ListaPlana.js) com os elementos que queremos
mostrar na lista e depois fazer o FlatList dentro da View , para isso precisamos
configurar tres (3) paramentros no FlatList ()
--Volta no ListaPlana.js
import { isTemplateElement } from "@babel/types";
import React from "react";
import { View, Text, FlatList} from 'react-native';

// CRIAR uma array Produtos
const Produtos = [
    {
      id:'001',
      desc:['mouse', '25.00']
    },
    {
    id:'002',
    desc:['teclado', '35.00']
    },
    {
    id:'003',
    desc:['monitor', '50.00']
    },
    
    ]

export default function (){

return (
    <View>
        <FlatList

        // DE ONDE VEM OS DADOS
            data={Produtos}
        // A chave que queremos pegar (id), pega numa array function
        keyExtractor={item=>item.id}
        // E pegar as descrições que são uma array, posição 0 e posição 1 --- pegar (desc), pega numa array function
        // Usamos parentes pois tem mais de 1 e retorne um text, contendo a descrição e o valor do produto
        renderItem={({item})=><Text>Descrição:{item.desc[0]} - Valor:{item.desc[1]} </Text>}

        />

    </View>

)}

---- COMO ESTA CHAMADO LA NO App.js DEU CERTO
OBS:  TUDO AINDA ESTA SEM LIMITES NA TELA (não estamos com uso do SafeAreaview)
poderia criar uma margin top no estilos.conteiner

---ESTILIZAR A LISTA PLANA
--Declara StyleSheet la em cima (import) e colocar uma view no texto que vai mostrar o produto
isso é o texto vai ficar denro de uma view
// Usamos parentes pois tem mais de 1 e retorne um text, contendo a descrição e o valor do produto
        renderItem={({item})=><View><Text>Descrição:{item.desc[0]} - Valor:{item.desc[1]} </Text></View>}

---FICAR ASSIM

import { isTemplateElement } from "@babel/types";
import React from "react";
import {StyleSheet, View, Text, FlatList} from 'react-native';

// CRIAR uma array Produtos
const Produtos = [
    {
      id:'001',
      desc:['mouse', '25.00']
    },
    {
    id:'002',
    desc:['teclado', '35.00']
    },
    {
    id:'003',
    desc:['monitor', '50.00']
    },
    
    ]

export default function (){

return (
    <View>
        <FlatList

        // DE ONDE VEM OS DADOS
            data={Produtos}
        // A chave que queremos pegar (id), pega numa array function
        keyExtractor={item=>item.id}
        // E pegar as descrições que são uma array, posição 0 e posição 1 --- pegar (desc), pega numa array function
        // Usamos parentes pois tem mais de 1 e retorne um text, contendo a descrição e o valor do produto
        renderItem={({item})=><View style={estilos.item}><Text style={estilos.prod}>Descrição:{item.desc[0]} - Valor:{item.desc[1]} </Text></View>}

        />

    </View>

)}

const estilos = StyleSheet.create({
    item:{

     backgroundColor:'#aaa',
     padding:15,
     marginVertical:8,
     marginHorizontal:16
      
       },
       prod:{

      fontSize:20,
      color:'#fff'
         
          }
     
    });
  ---OK PERFEITO


  18---Como inserir imagem de fundo no aplicativo, ImageBackground

  --Criei um fundo de 660 por 440
  --- fazer o import do ImageBackground
  ---E criar uma constante (const) apontando o caminho
  --- Coloca o ImageBackground dentro da view na App.js e temos que configurar o source e o style do nosso componente

import React from "react";
import {StyleSheet, View, Text, ImageBackground} from 'react-native';
import Estilos from './estilos/Estilos.js';
import Lp from './componentes/ListaPlana';
 
const imgbg1='./assets/imagens/fundo1.png'
const imgbg2='./assets/imagens/fundo2.png'



export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
    <ImageBackground
    source={require(imgbg2)}
    style={estilos.imagemfundo }
    
    >
    <Text >Vai dar tudo Certo</Text>
    <Text >Com a bença do Senhor</Text>
    <Lp/>
    </ImageBackground>
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
       width:'100%'
       
        }

   
  });

--Se quisser mudar a imagem é so mudar o arquivo no final do caminho
--OK PERFEITO


19---State em React Native - Componente Funcional
--VAMOS LIMPAR NOVAMENTE O App.js

import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';

export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
    
     <View>
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
    </View>
   
   
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'

       
        }

   
  });


---VAMOS COMEÇAR O STATE ---OS componetes não consegue interagir com variavel , por isso prexisamos do STATE
---manipular o estado do componentes
---Declaramos (import useState) la em cima e Criar um state dentro do componente App1
const [ligado, setLigado]=useState(true)
----E pegar ele dentro da View atraves de uma array fuction
import React, {useState} from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';


export  default  function App1(){
 
  //Define nome do estado e o nome da função, mostra que é um state atras do useState com o valor inicial
  // Como se fosse uma variavel (ligado) com o valor (true)
const [ligado, setLigado]=useState(false)

return(
  <View style={Estilos.conteiner}>
    
    {ligado?  // Se ele esta com valor de origem (true) rediriciona a view
    <View>
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
    </View>
    :  // Se NÃO  esta com valor de origem (true) rediriciona o TEXTO
    <Text >* * *</Text>
   }
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'

       
        }

   
  });
------OK PERFEITO
----Poderia ser feito com uma variavel comum , então faremos assim com um 
componente (BUTTON) para manipular o state - por mei de uma array function na propriedade onPress.
---Faz o import do Button la em cima
import React, {useState} from "react";
import {StyleSheet, View, Text, Button} from 'react-native';
import Estilos from './estilos/Estilos.js';


export  default  function App1(){
 
  //Define nome do estado e o nome da função, mostra que é um state atras do useState com o valor inicial
  // Como se fosse uma variavel (ligado) com o valor (true)
const [ligado, setLigado]=useState(false)

return(
  <View style={Estilos.conteiner}>
    <Button
      title= {ligado?"desligar":"Ligar"}
      onPress={()=>setLigado(!ligado)}   // pega o valor de ligado e nega, se for false passa para true e vice-versa

    />
    
    {ligado?  // Se ele esta com valor de origem (true) rediriciona a view
    <View>
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
    </View>
    :  // Se NÃO  esta com valor de origem (true) rediriciona o TEXTO
    <Text >* * *</Text>
   }
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
       
        }
   
  });


20-------State em React Native - Componente de Classe  ----- DEU ERRADO  xxxx  (corrigir o return)
--VAMOS LIMPAR NOVAMENTE O App.js

import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';

export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
        
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
   
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
      
        }
 });

 -------VAMOS CRIAR o COMPONENTE DE CLASSE EM componentes.CarroC.js 
 e depois chamar-lo em App.js Não esquecenc=do de importar-lo

 import React, { Component } from "react";
import {Button, View, Text} from 'react-native';


//Carro vai vim pela propriedade----- this.props.Valor da propriedade';
//O ligado vai vim do state----- this.props.ESTADO DO STATE ---VERIFICA SE ESTA LAGADO OU NÃO 


export default class Carro extends Component {
    state={
        ligado:true  //Pode ser mais de uma estado
    }


  render(props){  //Trabalhando co classe nunca esquecer do render e nesse caso vai passar propriedade
        return (
                <View>

            
            <Text >Carro:{this.props.nome}  -  Ligado:{this.state.ligado ? "Sim" : "Não"} </Text>
                <Button
                  // tanto o texto e button vai verificar o (state) estado ligado ? ai responde conforme o state
                  title={this.state.ligado ? "Desligado" : "ligar"}  
                 onPress={
                        ()=>{this.setState({ligado:!this.state.ligado})}

                 }
                />
                 </View>
        )
  }

}


-----------App.js



import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
import CarroC from './componentes/CarroC.js'

export  default  function App1(){
 
return(
  <View style={Estilos.conteiner}>
     
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <CarroC nome="golf" />
    </View>
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

------DEU ERRADO  xxxx  (corrigir o return)

21----- REPETIR O STATE FUNCIONAL      -----DEU CERTO
--VOU CRIAR UM  COMPONTENTE em componentes.CarroF.js

import React, { useState } from "react";
import {Button, View, Text} from 'react-native';


// Não usa o this.props
//O ligado vai vim do state (-VERIFICA SE ESTA LAGADO OU NÃO )-----props.nome do CARRO --
 
export default function(props) {
  useState
    const [ligado, setLigado] = useState(true)

        return (
                <View>

            
                <Text > Carro:{props.nome}  -  Ligado:{ligado? "Sim" : "Não"} </Text>
                <Button
                  // tanto o texto e button vai verificar o (state) estado ligado ? ai responde conforme o state
                  title= {ligado?"desligar":"Ligar"}
      onPress={()=>setLigado(!ligado)}   
                />
                 </View>
        )
  }

---E CHAMA NO App.js --com a devida import
import React from "react";
import {StyleSheet, View, Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
import CarroF from "./componentes/CarroF.js";

export  default  function App1(){
 
return(

  <View style={Estilos.conteiner}>
    
     <View> 
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
        <CarroF nome="Golf" />
</View>

    </View>
  
    
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });


-----DEU certo



22------SAFEAREAVIEW - Define uma area de segurança - Passa a ser um CONTEINER

----vamos subustituir no App.js a View pelo SafeAreaview (Declara antes)
import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';
import CarroF from "./componentes/CarroF.js";

export  default  function App1(){
 
return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
        <CarroF nome="Golf" />
    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

---(SSO NÃO MUDA EM NADA ATE AGORA - Mas fica sendo o conteiner)

23----Componente Switch em React Native
---DENTRO DO CARRO VAMOS USAR O Switch no lugar de BUTTON (declarar)
---TEMOS qie definir algunas propriedades
import React, { useState } from "react";
import {Switch, View, Text, ProgressViewIOSComponent} from 'react-native';


// Não usa o this.props
//O ligado vai vim do state (-VERIFICA SE ESTA LAGADO OU NÃO )-----props.nome do CARRO --
 
export default function(props) {
  useState
    const [ligado, setLigado] = useState(false)
    const toggleLigado=()=>{setLigado(!ligado)} //pode usar o PrevesState -> !PrevesState
 
        return (
                <View>
                <Text > Carro:{props.nome}  -  Ligado:{ligado? "Sim" : "Não"} </Text>
                <Switch
                  // Definir cor
                  trackColor={{false:"#777", true:"#8bf"}}
                   thumbColor={ligado? '#00f' :'#444' }
                   // Definir Estado ---como ligado ta true --ele vai ligar
                   // Se mudar para false - muda 
                   value={ligado}
                   // AGORA MUDA O ESTADO (evento) - vamos mudar de acordo com o clique no switch 
                   //FAz atraves de uma array function
                   onValueChange={
                     // SERIA ISSO ----()=>{setLigado(!ligado)}
                     // vamos fazer por uma função que condiciona (la em cima) a toggleLigado e USAR
                     toggleLigado

                   }



                />
                 </View>
        )
  }

---OK PERFEITO


24----Componente TextInput em React Native -CAIXA DE TEXTO
---FAZER COMPONENTE componentes.CaixaTexto.js
import React, {useState} from 'react';
import {View, TextInput, Text } from 'react-native';

export default function(){

//para fazer a associação da CAIXA DE TEXTO com o nome precisamos de uma state
 // declara um useState e tranformamos num state
 // Inicialmente com um Nome vazio
  const[nome, setNome]=useState("")
 //AGORA pode associar o value do componente CAIXA DE TEXTO ao State
 const mudarNome =()=>{setNome}
return (
    <View>
            <Text >Digite seu Nome:</Text>
            <TextInput
          //EM Line
            style={{borderWidth:1, borderBottomColor:'#000'}}
            //ASSOCIANDO COM O STATE nome (mas não permite edição)---pois esta atrelado ao valor inial que é vazio
            value={nome}
           //Precisamos de um EVENTO --- pode ser uma funcção array fuctiom la em cima e chama aqui no EVENTO 
           //Faremos diretamente aqui Vamos passar um Text para dentro da array fuction
           // e atraves do setNome definir um texto desejado

           onChangeText={text=>setNome(text)}

           //tudo que digitamos vai para o state nome
           
           />

            <Text>Valor digitado vai para state nome: {nome}</Text>
    </View>

)}

----CHAMAR EM App.js
import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';
import CxTx from  './componentes/CaixaTexto';

export  default  function App1(){
 return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <CxTx/>
    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });


25------Componente ScrollView em React Native  (AREA DE ROLAGEM)
PODEMOS INCLUIR QUALQUE COISA DENTRO DA ScrollView
---Vamos fazer o Compomentes.Rolagem.js

import React from 'react';
import {View, TextInput, Text, ScrollView } from 'react-native';

export default function(){
return (
    <View style={{flex:1}}>
        
        <ScrollView style={{backgroundColor:'#333', padding:15, }}>
        
            <Text style={{color:'#eee', fontSize:40}}>
            O arcebispo de Pouso Alegre (MG), dom José Luiz Majella Delgado, informou em comunicado que o papa Francisco "dispensou Ernani Maia dos Reis do celibato e de todas as demais obrigações inerentes ao estado clerical e decorrentes das Sagradas Ordens".... - Veja mais em 
            </Text>

        </ScrollView>

    </View>

)}

----CHAMAR EM App.js
import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';
import CxTx from  './componentes/CaixaTexto';

export  default  function App1(){
 return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <CxTx/>
    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

26-----Componente Touchablehighlight em React Native
---Vamos fazer o Compomentes.Toque.js
----Vamos usar o useState, StyleSheet, TouchableHighlight
PODEMOS INDICAR QUALQUE COISA DENTRO DA TouchableHighlight

import React, {useState} from 'react';
import {View, StyleSheet, Text, TouchableHighlight } from 'react-native';

export default function(){

//para fazer a interação com componentes variaveis  precisamos de uma state
// Noosa state vai ser um contador iniciando com value 0
const [Cont, setCont]=useState(0)
//VAMOS FAZER a array Function  (contar) levar para onPress
const contar=()=>{
    setCont(Cont + 1)
}

return (
    <View >
        <TouchableHighlight style={estilos.botao}
        // para associar com a interalão faremos um evento e criamos uma array fuction
         //(diretamente aqui ou la em cima e chama aqui no EVENTO onPress)
         //VAMOS FAZER LA EM CIMA NA Function e chamar aqui
         onPress={contar}
         underlayColor='#000'
        >
        <Text>America Sport</Text>
        </TouchableHighlight>
        <Text>{Cont}</Text>
      
    </View>

)}
const estilos = StyleSheet.create({
    botao:{
     alignItems:'center',
     backgroundColor:'#ccc',
     padding:15
           
       }
    });
----CHAMAR EM App.js
import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';

import Toque from './componentes/Toque'

export  default  function App1(){
 return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <Toque/>

    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

27-------Componente Modal em React Native---(USADO GERALMENTE PARA APRESENTAR ALGO EM CIMA(sobreposto) DA VIEW)
--Vamos fazer o Compomentes.Modal.js
----Vamos usar o useState, StyleSheet, Modal
PODEMOS COLOCAR QUALQUE COISA DENTRO DA Modal
--O Modal precisa ser formatado por varias opções
---Precisa definir os states do botão para interagir com algo

---View Modal.js

import React, {useState} from 'react';
import {View, StyleSheet, Text, Button, Modal } from 'react-native';

export default function(){
   //  Precisa definir os states do botão para interagir com algo
const [visivel, setVisivel]=useState(true)

return (
    <View > 
        
        <Modal 
        // O Modal precisa ser formatado por varias opções
          animationType="slide"
          transparent={true}
          visible={visivel} // AQUI passei o valor do "state visivel" (la de cima) para a proprieda visivel
          style={{}}  // Oestilo precisa ser aplicado na View que contem os componentes da Modal 
        >
 
            <View style={estilos.Modal}  >
                <Text style={estilos.texto} >Com a bença do Senhor</Text>
                <Text style={estilos.texto}>Vai dar tudo Certo</Text>
                <Text style={estilos.texto}>Com a bença do Senhor</Text>
            <Button  // BOTÃO FECHAR
             title='Fechar' //  Precisa ser formatado pelo title
             onPress={()=>{setVisivel(false)}}   // Click no fehar ao MODAL desaparece (Invisivel)
            />

            </View>

        </Modal>
        <Button  // BOTÃO Mostrar - Fora da MODAL
             title='Mostrar' //  Precisa ser formatado pelo title
             onPress={()=>{setVisivel(true)}}   // Click no fehar ao MODAL desaparece (Invisivel)
            />
    </View>

);};

// CRIAR UM ESTILO

const estilos = StyleSheet.create({
    Modal:{
     backgroundColor:'#000',
     margin:20,
     padding:20,
     borderRadius:20,
     elevation:10,
      alignItems:'center'
    },
     texto:{color:'#fff',   alignItems:'center'}
    });
  ----CHAMAR EM App.js
  import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';

import Modal from './componentes/Modal'

export  default  function App1(){
 return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <Modal/>

    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

  ---Ok PERFEITO

28----Componente RefreshControl em React Native 
---EM VEZ DE APROVEITA O Rolage,.js VOU CRIAR O Atualizar.js e Repetir o conteudo do Rolage.js e continuar
--Criar componentes.Atualizar.js
-------Vamos usar o useState, RefreshControl
---Vamos criar o state para indicar se o compomente esta atualizando ou não
---DENTRO DO ScrollView vamos colocar a propiedade  RefreshControl e dentro da propieddade
VAMOS COLOCAR NOSSO COMPONENTES RefreshControl

---Atualizar.js
mport React, {useState} from 'react';
import {View, TextInput, Text, ScrollView, RefreshControl } from 'react-native';

export default function(){
    // Vamos criar o state para indicar se o compomente esta atualizando ou não
const [atualizando, setAtualizando]=useState(false)
    //  criar uma função para poder atualizar (mudar de state)- se fosse arrayfuction SERIA ASSIM
    //const aoAtualizar=()=>{ ---O RESTO
    //  pode ser arrayfuction , MAS VAMOS FAZER UMA FUNçÂO NORMAL
    function aoAtualizar(){
        setAtualizando(true); //EStou atualizando, pois agora state atualizar é TRUE, --uso ponto e virgula opcional
        // Ao atualizar fazer a seguinte rotina (pode ser qulquer rotina)
        // como não tenho nada para fazer , vou so mostrar o referescontrole atraves de um setTimeout numa arrayfunction
        // depois de 3 segundo o setAtualizando fica false
        setTimeout(() => {setAtualizando(false)}, 3000     
        );

    }

    return (
    <View style={{flex:1}}>
        
        <ScrollView style={{backgroundColor:'#333', padding:15,}}
        // DENTRO DO ScrollView vamos colocar a propiedade  RefreshControl e dentro da propieddade
        // VAMOS COLOCAR NOSSO COMPONENTES RefreshControl
                     RefreshControl={
                     <RefreshControl
                     // Passar o valor do state atualizar e ver se ele esta atualizando ou não
                     refreshing={atualizando}
                     // Ao atualizar executar função
                     onRefresh={aoAtualizar}
            
            />
        }

        >
        
            <Text style={{color:'#eee', fontSize:40}}>
            O arcebispo de Pouso Alegre (MG), dom José Luiz Majella Delgado, informou em comunicado que o papa Francisco "dispensou Ernani Maia dos Reis do celibato e de todas as demais obrigações inerentes ao estado clerical e decorrentes das Sagradas Ordens".... - Veja mais em 
            </Text>

        </ScrollView>

    </View>

)}

----CHAMAR NO App.js
import React from "react";
import {StyleSheet, View,  Text, SafeAreaView} from 'react-native';
import Estilos from './estilos/Estilos.js';

import Rl from './componentes/Atualizar'

export  default  function App1(){
 return(

  <SafeAreaView style={Estilos.conteiner}>
    
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       <Rl/>

    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%'
     }
  });

----NÂO VI EFEITO xxxxxxx

29-------Componente StatusBar em React Native - BARRA DE STATUS DO Compomentes
---SOMENTE NA VIEW App.js
import React, {useState} from "react";
import {StyleSheet, View, Button, Pressable, Text, SafeAreaView, StatusBar} from 'react-native';
import Estilos from './estilos/Estilos.js';


export  default  function App1(){
  // Vamos criar o state para indicar o estado atual do compomente 
// cor é o estado atual black, e setCor é como vamos mudar (interagir)

 const [cor,setCor]=useState("black")

 return(

 <SafeAreaView style={Estilos.conteiner}>
    
   <StatusBar
    // se definimos o backgroundColor="blue" como backgroundColor={cor}  
    // Ela fica preta, pois o state dela é black
     //backgroundColor="blue"
     backgroundColor={cor}
     barStyle="default"
    
     />  
        <Text >Vai dar tudo Certo</Text>
        <Text >Com a bença do Senhor</Text>
       
    <Button
      title="Vermelho"
      //setCor é como vamos mudar (interagir) atraves de uma arrayfuction ()=>{} no evento onPress={}
      onPress={()=>{setCor("red") }}
    
    />

<Button
      title="Azul"
       //setCor é como vamos mudar (interagir) atraves de uma arrayfuction ()=>{} no evento onPress={}
       onPress={()=>{setCor("blue") }}
    
    />
     <Button
      title="Verde"
       //setCor é como vamos mudar (interagir) atraves de uma arrayfuction ()=>{} no evento onPress={}
       onPress={()=>{setCor("green") }}
    
    />
    
    </SafeAreaView>
   
);
};

const estilos = StyleSheet.create({
  logo:{
   width:250,
   resizeMode:'contain'
    
     },

     imagemfundo:{
     flex:1,
     resizeMode:'cover',
     width:'100%' 
     }
  });
----OK PERFEITO


30-----Navigation em React Native #P1 (NAVEGAR ENTRE TELAS)
---VAMOS LIMPAR App.js

import React from "react";
import {StyleSheet, View, Button,  Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
export  default  function App1(){
  return(
   <View>
      <Text >Vai dar tudo Certo</Text>
     <Text >Com a bença do Senhor</Text>
   </View>
  );
};

----OK VAMOS PARA Navigation
---Olha o site oficial (https://reactnavigation.org/)--RED DOCS->GET Start
---Precisamos instalar algunas DEPEDENCIAS
# npm install @react-navigation/native --PULEI ESSE
# npm install @react-navigation/native @react-navigation/stack --(instalei os dois juntos)
# npm install react-native-screens react-native-safe-area-context
# npm install react-native-reanimated  ---PULEI ESSA
# npm install react-native-gesture-handler  
# npm install @react-native-community/masked-view  ---PULEI ESSA


-----VOLTANDO PARA A VIEW App.js COM AS DEPEDENCIAS JA INSTALADA
VAMOS FAZER OS Import (import { NavigationContainer } from '@react-navigation/native';)
VAMOS FAZER OS Import import { createStackNavigator } from "@react-navigation/stack";
import React from "react";
import {StyleSheet, View, Button,  Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";


//VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
const Pilha=createStackNavigator();
// AGORA VAMOS CRIAR NOSSAS TELAS
//Tela HOME que vai receber como parametro navegation
// CRIANDO uma tela HOME
function TelaHome ({navigation}){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>

    <Button   // Atraves de um botão navegaremos para  tela CANAL
        title="tela canal"
        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
        onPress={()=>{navigation.navigate("Canal")}}
    />
   </View>
  );
}
//Tela CANAL 
// CRIANDO uma tela CANAL
function TelaCanal ({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
                 <Text >Tela Canal</Text>
                <Text >Tela de programação</Text>
                <Button   // Atraves de um botão navegaremos para  tela CANAL
                        title="tela Home"
                        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
                        onPress={()=>{navigation.navigate("Home")}}
                />
                <Button   // Atraves de um botão navegaremos para  tela CANAL -----USANDO POP da PILHA
                        title="VOLTAR"
                        // arrayfuction vai usar o parametro navigation pelo metodo goBack e chama a tela anterior
                        onPress={()=>{navigation.goBack()}}
                />
      </View>
    );
  }
   
export  default  function App1(){
  
 return(
    <NavigationContainer> 
    <Pilha.Navigator initialRouteName="TelaHome">
    
    <Pilha.Screen  // EXIBINDO uma tela HOME ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Pilha.Navigator initialRouteName="TelaHome">)
    name="Home"
    component={TelaHome}
    options={{title:'Tela inicial'}}
    />

<Pilha.Screen  // EXIBINDO uma tela CANAL ---vai ficar um de cada vez
    name="Canal"
    component={TelaCanal}
    options={{title:'Tela canal'}}
    />

</Pilha.Navigator>
    
    </NavigationContainer>
    
   
);
};

--------PODE SER COMPONENTE externo
---AS TELAS PODEM SER FEITA SEPARADAMENTE (EXTERNA) --quando fizer isso faz a tela exatamente como esta aqui
e abre lá em componentes.TelaCanal.js (exemplo) e chama em App,js dando o import (import TelaCanal from './componentes/TelaCanal)
e chama la na Guias.Screen com o nome (component={TelaCanal})
----VAMOS CRIAR UMA TELA bo COMPONENTES

????????

31---Navigation em React Native #P2 - 
---VAMOS CRIAR MAIS  TELAS -  e Adicionar o componentes na nossa PILHA
--QUANDO CHAMAR A TELA PELO NAME NO BOTÃO. PODEMOS na sequencia PASSAR paramentros PARA TELA
--A VIEW App.js
import React from "react";
import {StyleSheet, View, Button,  Text} from 'react-native';
import Estilos from './estilos/Estilos.js';
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";


//VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
const Pilha=createStackNavigator();
// AGORA VAMOS CRIAR NOSSAS TELAS (componentes)
//Tela HOME que vai receber como parametro navegation
// CRIANDO uma tela HOME
function TelaHome ({navigation}){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>

    <Button   // Atraves de um botão navegaremos para  tela CANAL
        title="tela canal"
        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
        onPress={()=>{navigation.navigate("Canal")}}
    />
     <Button   // Atraves de um botão navegaremos para  tela CURSO
        title="tela CURSO"
        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
        onPress={()=>{navigation.navigate("Cursos")}}
    />
   </View>
  );
}
//Tela CANAL 
// CRIANDO uma tela CANAL
function TelaCanal ({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
                 <Text >Tela Canal</Text>
                <Text >Tela de programação</Text>
                <Button   // Atraves de um botão navegaremos para  tela CANAL
                        title="tela Home"
                        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
                        onPress={()=>{navigation.navigate("Home")}}
                />
                <Button   // Atraves de um botão navegaremos para  tela CANAL -----USANDO POP da PILHA
                        title="VOLTAR"
                        // arrayfuction vai usar o parametro navigation pelo metodo goBack e chama a tela anterior
                        onPress={()=>{navigation.goBack()}}
                />
      </View>
    );
  }
  // CRIANDO uma tela CURSO
  function TelaCurso({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Tela Curso</Text>
         
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Tela Cursos"
          // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
          //QUANDO CHAMAR A TELA PELO NAME NO BOTÃO. PODEMOS na sequencia PASSAR paramentros PARA TELA (outra tela) que vai receber
          // E a TELA que VAI RECEBER TEM QUE RECEBER ALEM DO navigation, RECEBE tambem o route que tem que ser colocado em variavel
          onPress={()=>{navigation.navigate("CursoReactNative", {
             aulas:100, autor:"Carlos"}
          )}}
      />
     </View>
    );
  }

  // CRIANDO uma tela CURSOREACTNATIVE
  // E a TELA que VAI RECEBER TEM QUE RECEBER ALEM DO navigation, 
  //RECEBE tambem o route que tem que ser colocado em variavel
  function TelaCursoReactnative({route ,navigation}){
    // Variaveis armazenamando os paramentros recebida
    const {aulas}=route.params;
    const {autor}=route.params;
    //const aulas=route.params.aulas; PODERIA SER ASSIM TAMBEM
    //const autor=route.params.autor; PODERIA SER ASSIM TAMBEM
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Curso de React native</Text>
          <Text >Curso com: {aulas} aulas do Autor {autor} </Text>
         
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Home"
          // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
          onPress={()=>{navigation.navigate("Home")}}
      />
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Tela de Cursos"
          // arrayfuction vai usar o parametro navigation pelo metodo goBack e chama a tela anterior
          onPress={()=>{navigation.goBack()}}
      />

     </View>
    );
  }

   
export  default  function App1(){
  
 return(
    <NavigationContainer> 
    <Pilha.Navigator initialRouteName="TelaHome">
    
    <Pilha.Screen  // EXIBINDO uma tela HOME ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Pilha.Navigator initialRouteName="TelaHome">)
    name="Home"
    component={TelaHome}
    options={{title:'Tela inicial'}}
    />

<Pilha.Screen  // EXIBINDO uma tela CANAL ---vai ficar um de cada vez
    name="Canal"
    component={TelaCanal}
    options={{title:'Tela canal'}}
    />

<Pilha.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSO ---vai ficar um de cada vez
    name="Cursos"
    component={TelaCurso}
    options={{title:'Tela dos Cursos'}}
    />

<Pilha.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSOREACTNATIVE ---vai ficar um de cada vez
    name="CursoReactNative"
    component={TelaCursoReactnative}
    options={{title:'Curso de React Native'}}
    />

</Pilha.Navigator>
    
    </NavigationContainer>
    
   
);
};

OK PERFEITO

32-----Navigation em React Native #P3 - ADICIONAR CABEÇALHO E ALTERAR VISUAL -- NAVEGAÇÃO EM PILHAS
--VAMOS TRABALHAR NA Screm QUE ESTA EM NOSSA PILHA , mais precisamente EM options
----EM options da Screm podemos trabalha com diversos elementoos
--POR EXEMPLO : 
options={{
      title:'Tela inicial',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff'
    
    }}
---PODEMOS FAZER O ESTILO DO NOSSO CABEÇALHO com quisser - fica livre
---MAS PODEMOS ADICIONAR BOTÃO --colocaremos um de alerta mas pode ser o que quisser (Bom para exibir MODAL)

import React from "react";
import {StyleSheet, View, Button,  Text, Alert} from 'react-native';
import Estilos from './estilos/Estilos.js';
import { NavigationContainer } from "@react-navigation/native";
import { createStackNavigator } from "@react-navigation/stack";


//VAMOS Criar nossa PILHA que vai receber o retorno do createStackNavigator(pilha de navegação)
const Pilha=createStackNavigator();
// AGORA VAMOS CRIAR NOSSAS TELAS (componentes)
//Tela HOME que vai receber como parametro navegation
// CRIANDO uma tela HOME
function TelaHome ({navigation}){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>

    <Button   // Atraves de um botão navegaremos para  tela CANAL
        title="tela canal"
        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
        onPress={()=>{navigation.navigate("Canal")}}
    />
     <Button   // Atraves de um botão navegaremos para  tela CURSO
        title="tela CURSO"
        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
        onPress={()=>{navigation.navigate("Cursos")}}
    />
   </View>
  );
}
//Tela CANAL 
// CRIANDO uma tela CANAL
function TelaCanal ({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
                 <Text >Tela Canal</Text>
                <Text >Tela de programação</Text>
                <Button   // Atraves de um botão navegaremos para  tela CANAL
                        title="tela Home"
                        // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
                        onPress={()=>{navigation.navigate("Home")}}
                />
                <Button   // Atraves de um botão navegaremos para  tela CANAL -----USANDO POP da PILHA
                        title="VOLTAR"
                        // arrayfuction vai usar o parametro navigation pelo metodo goBack e chama a tela anterior
                        onPress={()=>{navigation.goBack()}}
                />
      </View>
    );
  }
  // CRIANDO uma tela CURSO
  function TelaCurso({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Tela Curso</Text>
         
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Tela Cursos"
          // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
          //QUANDO CHAMAR A TELA PELO NAME NO BOTÃO. PODEMOS na sequencia PASSAR paramentros PARA TELA (outra tela) que vai receber
          // E a TELA que VAI RECEBER TEM QUE RECEBER ALEM DO navigation, RECEBE tambem o route que tem que ser colocado em variavel
          onPress={()=>{navigation.navigate("CursoReactNative", {
             aulas:100, autor:"Carlos"}
          )}}
      />
     </View>
    );
  }

  // CRIANDO uma tela CURSOREACTNATIVE
  // E a TELA que VAI RECEBER TEM QUE RECEBER ALEM DO navigation, 
  //RECEBE tambem o route que tem que ser colocado em variavel
  function TelaCursoReactnative({route ,navigation}){
    // Variaveis armazenamando os paramentros recebida
    const {aulas}=route.params;
    const {autor}=route.params;
    //const aulas=route.params.aulas; PODERIA SER ASSIM TAMBEM
    //const autor=route.params.autor; PODERIA SER ASSIM TAMBEM
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Curso de React native</Text>
          <Text >Curso com: {aulas} aulas do Autor {autor} </Text>
         
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Home"
          // arrayfuction vai usar o parametro navigation pelo metodo navigate e chama a tela pelo name
          onPress={()=>{navigation.navigate("Home")}}
      />
      <Button   // Atraves de um botão navegaremos para  tela CANAL
          title="Tela de Cursos"
          // arrayfuction vai usar o parametro navigation pelo metodo goBack e chama a tela anterior
          onPress={()=>{navigation.goBack()}}
      />

     </View>
    );
  }

   
export  default  function App1(){
  
 return(
    <NavigationContainer> 
    <Pilha.Navigator initialRouteName="TelaHome">
    
    <Pilha.Screen  // EXIBINDO uma tela HOME ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Pilha.Navigator initialRouteName="TelaHome">)
    name="Home"
    component={TelaHome}
    options={{
      title:'Tela inicial',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff',
      // ADICIONAR UM BOTAO PELO DIREITA E USAR UMA ARRAYFUNCTION
      // note que esta entra a chave de parentes  
        headerRight: () => (
        <Button
        onPress={() => alert('This is a button!')}
        title="Info"
        color="#000"
      />

      ),
    
    }}
    />

<Pilha.Screen  // EXIBINDO uma tela CANAL ---vai ficar um de cada vez
    name="Canal"
    component={TelaCanal}
    options={{
      title:'Tela inicial',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff', 
      headerTitleStyle:{
        fontSize:12
      }
    
    }}
    />

<Pilha.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSO ---vai ficar um de cada vez
    name="Cursos"
    component={TelaCurso}
    options={{title:'Tela dos Cursos'}}
    />

<Pilha.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSOREACTNATIVE ---vai ficar um de cada vez
    name="CursoReactNative"
    component={TelaCursoReactnative}
    options={{title:'Curso de React Native'}}
    />

</Pilha.Navigator>
    
    </NavigationContainer>
    
   
);
};

---OK PERFEITO

33----Navigation em React Native #P4 TabNavigation 
---INSTALAR MAS UMA DEPENDENCIA BOTTOM_TABS
# npm install @react-navigation/bottom-tabs  

---VAMOS NAVEGAR POR ABAS --VOU MODIFICA O App.js o createBottomTabNavigator e a pilha 
por Guias (ABAS)
---A CRIAÇÃO DA TELAS PERMANENCE DO MESMO JEITO
---NAS TELAS OS BOTÕES FICAM OPCIONAILS (VOU TIRAR) --PODERIA FICAR E TER AS DUAS FORMAS DE NAVEGAÇÃO
---TROCAR DE Pilha.Navigator e PILHAS.SCREEN PARA Guias.Navigator e GUIAS.SCREEN repectivamente
---AS TELAS PODEM SER FEITA SEPARADAMENTE (EXTERNA) --quando fizer isso faz a tela exatamente como esta aqui
e abre lá em componentes.TelaCanal.js (exemplo) e chama em App,js dando o import (import TelaCanal from './componentes/TelaCanal)
e chama la na Guias.Screen com o nome (component={TelaCanal})

import React from "react";
import {StyleSheet, View, Button,  Text, Alert} from 'react-native';
import Estilos from './estilos/Estilos.js';
import { NavigationContainer } from "@react-navigation/native";

import { createBottomTabNavigator } from "@react-navigation/bottom-tabs"; 

//VAMOS Criar nossa ABA(guias) que vai receber o retorno do createBottomTabNavigator(pilha de navegação)
const Guias=createBottomTabNavigator();
// AGORA VAMOS CRIAR NOSSAS TELAS (componentes)
//Tela HOME que vai receber como parametro navegation
// CRIANDO uma tela HOME
function TelaHome ({navigation}){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>

  
   </View>
  );
}
//Tela CANAL 
// CRIANDO uma tela CANAL
function TelaCanal ({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
                 <Text >Tela Canal</Text>
                <Text >Tela de programação</Text>
      </View>
    );
  }
  // CRIANDO uma tela CURSO
  function TelaCurso({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Tela Curso</Text>
     </View>
    );
  }

 
   
export  default  function App1(){
  
 return(
    <NavigationContainer> 
    <Guias.Navigator initialRouteName="TelaHome">
    
    <Guias.Screen  // EXIBINDO uma tela HOME ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Pilha.Navigator initialRouteName="TelaHome">)
    name="Home"
    component={TelaHome}
    options={{
      title:'Tela inicial',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff',
      // ADICIONAR UM BOTAO PELO DIREITA E USAR UMA ARRAYFUNCTION
      // note que esta entra a chave de parentes  
        headerRight: () => (
        <Button
        onPress={() => {alert('This is a button!')}}
        title="Info"
        color="#000"
      />

      ),
    
    }}
    />

<Guias.Screen  // EXIBINDO uma tela CANAL ---vai ficar um de cada vez
    name="Canal"
    component={TelaCanal}
    options={{
      title:'Tela Canal',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff', 
      headerTitleStyle:{
        fontSize:12
      }
    
    }}
    />

<Guias.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSO ---vai ficar um de cada vez
    name="Cursos"
    component={TelaCurso}
    options={{title:'Tela dos Cursos'}}
    />
</Guias.Navigator>
    
    </NavigationContainer>
);
};

---OK PERFEITO

34 -----Navigation em React Native #P5 DrawerNavigation (DESLIZAR TELA)
-----INSTALAR O @react-navigation/drawer
# npm install @react-navigation/drawer
---VAMOS MUDAR O TIPO DE NAVEGADOR no App.js VAMOS USAR 
---AS TELAS CONTINIAM AS MESMAS
---NO LUGAR DE GUIA VAMOS COLOCAR GAVETAS
---AS TELAS PODEM SER FEITA SEPARADAMENTE (EXTERNA) --quando fizer isso faz a tela exatamente como esta aqui
e abre lá em componentes.TelaCanal.js (exemplo) e chama em App,js dando o import (import TelaCanal from './componentes/TelaCanal)
e chama la na Guias.Screen com o nome (component={TelaCanal})
---DEU ERRO TIVEMOS QUE CARREGAR NOVAMENTE (instalação de depemdencias)
---Precisou instalar - reanimated

# npm install react-native-reanimated

import React from "react";
import {StyleSheet, View, Button,  Text, Alert} from 'react-native';
import Estilos from './estilos/Estilos.js';
import { NavigationContainer } from "@react-navigation/native";
//import { createStackNavigator } from "@react-navigation/stack";
//import { createBottomTabNavigator } from "@react-navigation/bottom-tabs"; 
import { createDrawerNavigator } from "@react-navigation/drawer";

//VAMOS Criar nossa Gavetas que vai receber o retorno do createDrawerNavigator( navegação em gavetas)
const Gavetas=createDrawerNavigator();
// AGORA VAMOS CRIAR NOSSAS TELAS (componentes)
//Tela HOME que vai receber como parametro navegation
// CRIANDO uma tela HOME
function TelaHome ({navigation}){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>
   </View>
  );
}
//Tela CANAL 
// CRIANDO uma tela CANAL
function TelaCanal ({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
                 <Text >Tela Canal</Text>
                <Text >Tela de programação</Text>
      </View>
    );
  }
  // CRIANDO uma tela CURSO
  function TelaCurso({navigation}){
    return (
      <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
          <Text >Tela Curso</Text>
     </View>
    );
  }

 
   
export  default  function App1(){
  
 return(
    <NavigationContainer> 
    <Gavetas.Navigator initialRouteName="TelaHome">
    
    <Gavetas.Screen  // EXIBINDO uma tela HOME ---vai ficar um de cada vez (DEFINR A PRIMEIRA EM  <Pilha.Navigator initialRouteName="TelaHome">)
    name="Home"
    component={TelaHome}
    options={{
      title:'Tela inicial',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff',
      // ADICIONAR UM BOTAO PELO DIREITA E USAR UMA ARRAYFUNCTION
      // note que esta entra a chave de parentes  
        headerRight: () => (
        <Button
        onPress={() => {alert('This is a button!')}}
        title="Info"
        color="#000"
      />

      ),
    
    }}
    />

<Gavetas.Screen  // EXIBINDO uma tela CANAL ---vai ficar um de cada vez
    name="Canal"
    component={TelaCanal}
    options={{
      title:'Tela Canal',
      headerStyle:{
      backgroundColor:'#008'
      },
      headerTintColor:'#fff', 
      headerTitleStyle:{
        fontSize:12
      }
    
    }}
    />

<Gavetas.Screen  //ACIONANDO NA NOSSA PILHA--- EXIBINDO uma tela CURSO ---vai ficar um de cada vez
    name="Cursos"
    component={TelaCurso}
    options={{title:'Tela dos Cursos'}}
    />
</Gavetas.Navigator>
    
    </NavigationContainer>
);
};
----Precisou instalar - reanimated

# npm install react-native-reanimated

35-------Variáveis Static Globais 
---LIMPEI O App1.js
---PRECISAMOS PASSAR VALOR POR paramentros
---FAZER UM ARQUIVO DE VARIAVEIS GLOBAIS PARA SEREM REAPROVEITAVEIS
---TEMOS QUE TRABALHAR COM MODO CLASSE POIS VAMOS TRABALHAR COM JAVA
---CRIAR ARQUIVO EM COMPONENTES componentes.Globais.js
class Globais{
 static nome="Carlos"
 static canal="HDC Tecnologia"
 static num=2021
 }

 export default Globais;

 ----E CHAMAR NO App1.js , Import do componente GLOBAIS (import Globais from "./componentes/Globais.js";)
 ---LEMBRABSO QUE TEMOS QUE TRABALHAR COM CLASSE
import React, {Component} from "react";
import {StyleSheet, View, Button,  Text, Alert} from 'react-native';
import Estilos from './estilos/Estilos.js';
import Globais from "./componentes/Globais.js";

/*
export default function App1(){
  return (
    <View style={{flex:1,alignItems:'center',justifyContent:'center'}} >
        <Text >Tela Home</Text>
        <Text >Tela de incial</Text>
   </View>
  );
}
*/

export default class App1 extends Component{
  //RECEBE na variaveis nome a variaveis Global nome do componete Globais.js
  nome=Globais.nome
  numero=Globais.num
  canal=Globais.canal


  render(){

return (
// tem que colocar this pois é uma classe
      <View>
            <Text>{this.nome}</Text> 
            <Text>{this.canal}</Text> 
            <Text>{this.numero}</Text> 

      </View>

);
}
}


--Ok PERFEITO

36-----CRIAR APLICATIVO IMC - VAMOS FAZER AQUI MESMO
---LIMPANDO TUDO -- App.js
import React, {Component} from "react";
import {StyleSheet, Button,  Text, SafeAreaView} from 'react-native';
--ESTILO NA PROPEIA PAGINA
.
.
.
import React, {useState} from "react";
import {Alert, StyleSheet, TouchableHighlight, View, Text, SafeAreaView, TextInput, Image, ImageComponent} from 'react-native';

export default function Calcimc(){
//Precisaremos de tres variaveis então será tres state (peso, altura e resultado)
const [peso, setPeso]=useState(0)
const [altura, setAltura]=useState(0)
const [resultado, setResultado]=useState(0)
//PRECISAMOS DE UMA FUNÇÃO PARA CALCULAR
// PODE SER POR UMA FUNCTION NOMAL -----   function Calcimc (){}
// VAMOS FAZER POR arrayfunction ------     const Calcimc = ()=>{}

const Calcimc = ()=>{
  //VALIDAÇÃO Se tm valores
  // se peso for zero OU (||) não tiver peso
  if (peso==0 || !peso){
    alert('Informe o peso')
    return
  }
  if (altura==0 || !altura){
    alert('Informe a altura')
    return
  }
  // se chegou até aqui calcular resultado
 const r = peso/(altura*altura) // OU USAR 
 // const r = peso/(Math.pow(altura,2))
 // Colocaremos o resultado em setResultado (poderia ser feito direto)
 // toFixed (1)---porque o numero é grande, ai fixamos em 1 casa decimal
 setResultado(r.toFixed(1))
 //AGORA VAMOS USAR A FUNÇÂO (Calcimc) NO NOSSO TouchableHighlight na propriedade onPress em uma arrayfuction
}

  return (
    //Precisamos de uma TextInput para colocar o peso, colocaremos demtro de uma view
    <SafeAreaView style={estilos.corpo}>
      <View style={estilos.bloco} >
      <Text>Calculadora de IMC</Text> 
      </View>
      <View style={estilos.bloco} >
      <Text>Informe seu Peso</Text> 
      <TextInput  style={estilos.txt}
      autoFocus={true}
      keyboardType={'numeric'}
       //value={peso}
      //Passaar o valor digtadopara a caixa de texto atraves de uma arrayfunction
      onChangeText={text=>setPeso(text)}
      ></TextInput>  
      </View>
      <View style={estilos.bloco} >
      <Text>Informe Sua altura</Text> 
      <TextInput style={estilos.txt}
      autoFocus={false}
      keyboardType={'numeric'}
      // value={altura}
      //Passaar o valor digtado para a caixa de texto atraves de uma arrayfunction (propriedade  onChangeText)
      // o texto digitado alterar o state (muda o valor do estado)
      onChangeText={text=>setAltura(text)}
      ></TextInput>  
      </View>
      <View style={estilos.bloco} >
        <TouchableHighlight 
        style={estilos.btncalc}
        // uma arrayfuction Para poder chamar o resultado de nossa funcão Calcular(Calcimc)
        onPress={()=>{Calcimc()}}
        >
        <Text  style={estilos.txtBtn}>Calcular de IMC</Text> 
        </TouchableHighlight>
        
      </View >
      <View style={estilos.bloco}
      // Mostrar o valor do nosso Stade resultado
      >
      
      <Text > Mostrar o valor do nosso Stade resultado--Resultado do IMC: {resultado} </Text> 
      </View>
    
      <View style={estilos.bloco}>
       <Image
       source={require('./assets/imagens/IMC.png')}
        style={estilos.tabela}
      />
      </View>

   </SafeAreaView>
  );
}


const estilos = StyleSheet.create({
  
  corpo:{

    padding:10
  },

  bloco:{
    marginBottom:20
  },

  txt:{
    width:'100%',
    borderWidth:1,
    borderColor:'#000',
    borderRadius:20,
    padding:10
      },

      btncalc:{
          backgroundColor:'#048',
          alignItems:'center',
          justifyContent:'center',
          padding:20,
          borderRadius:30

      },

      txtBtn:{
        color:'#fff',
        fontSize:15,
        textTransform:'uppercase'

      }, 
      tabela:{
        width:'100%',
        resizeMode:'contain',
        marginTop:57


      }
 });

 ----OK PERFEITO

37-----Refatorando o primeiro App em React Native 00DIVIDIR EM PARTES

---PREGUIÇA ... MAS O SEGUNDO SEGUE O FORMATO

38 ---Criando Segundo App em React Native - Parte 1  ---QUAL MELHOR PREÇO (alcool, gasolina)
.
.
.

39----AsyncStorage, armazenamento local (chave,valor) )PULEI VARIOS APLICATIVOS

---PRIMEIRA TEMOS QUE INSTALAR A DEPENDENCIA DO AsyncStorage

# npm install @react-native-community/async-storage   --DEU ERRO COMO SEMPRE, QUEBREI A DEPENDENCIA A FORÇA 
# npm install @react-native-community/async-storage --force ---USEI ESSA

--VOU LIMPAR TODO O APP
import React from "react";
import { StyleSheet,  View, Text} from 'react-native';

export default function App1(){

  return (
        
      <View >
      <Text>Informe Sua altura</Text> 
      </View>
 );
}

const estilos = StyleSheet.create({

});

-------------------------------------------
---EM App1 Importar o AsyncStorage lÁ EM CIMA
import AsyncStorage from "@react-native-community/async-storage";

--VAMOS USAR STATE então DECLARAMOS useState
import React, {useState} from "react";
import { StyleSheet,  View, Text} from 'react-native';
import AsyncStorage from "@react-native-community/async-storage";
//POSO CRIAR QUANTOS STORAGE QUISER
import A_Curso from "@react-native-community/async-storage";

export default function App1(){
  // CRIAR um state curso
const [curso, setCurso]=useState(null)
  // CRIAR uma função (arrayfuction) de Aramzenamento(GRAVAR) com o nome Armazenar, pasando chave e valor
const Armazenar = (chave, valor)=>{
  //ARMAZENA ITEM
  AsyncStorage.setItem(chave, valor)
}
// CRIAR uma função (arrayfuction) com o nome Buscar, para BUSCAR -- Quero um valor atraves de uma chave
const Buscar = async (chave)=>{
  //ESPERAR do meu asynsc storage o retorno desta chave 
   const valor = await AsyncStorage.getItem(chave)
   //COLOCAR O Valor recebido dentro do State curso
   setCurso(valor)
   // OU PODE SER UM return, depende do que quero fazer com o valor
  // return valor

}

 // VAMOS ARMAZENAR (chama a função que criamos --Armazenar ou AsyncStorage.setItem(chave, valor) )
 Armazenar('01', 'React-native')
 Armazenar('02', 'React-Natal')
 Armazenar('03', 'Amazonas')

 // VAMOS BUSCAR
 Buscar('01')

  return (
        // VOU COLOCAR AQUI DENTRO DE UM TEXT
      <View >


      <Text>Curso: {curso}</Text> 
      </View>

  
  );
}


const estilos = StyleSheet.create({

});

40---Geolocalização 


41---Fetch API


42---ICONE

43-----